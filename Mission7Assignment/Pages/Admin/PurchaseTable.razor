@*Creates the table to display the purchases*@
<table class="table table-sm table-responsive table-bordered">

    @*Sets the title of the tables*@
    <thead>
        <tr>
            <th colspan="5" class="text-center">@TableTitle</th>
        </tr>
    </thead>

    @*Loops through to build the table body*@
    <tbody>
        @if (Purchases?.Count() > 0)
        {
            @*Gets the purchase data from each purchase in the database to display them*@
            @foreach (Purchase p in Purchases)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>@p.Zip</td>
                    <th>Book</th>
                    <th>Quantity</th>

                    @*Creates the button to change the purchase status*@
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="@(x => PurchaseSelected.InvokeAsync(p.PurchaseId))">
                            @ButtonLabel
                        </button>
                    </td>
                </tr>

                @*Lists out each book that is on each purchase order*@
                @foreach  (CartLineItem cli in p.Lines)
                { 
                    <tr>
                        <td colspan="2"></td>
                        <td>@cli.Book.Title</td>
                        <td>@cli.Quantity</td>
                    </tr>
                }
            }
        }
        @*If there are no purchases in the table, displays "No purchases to be shown"*@
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Purchases to be shown</td>
            </tr>
        }
    </tbody>

</table>

@*Sets parameters for the display page to know what *@
@code {

    [Parameter]
    public string TableTitle { get; set; } = "Purchases";

    [Parameter]
    public IEnumerable<Purchase> Purchases { get; set; }

    [Parameter]
    public string ButtonLabel { get; set; } = "Purchased";

    [Parameter]
    public EventCallback<int> PurchaseSelected { get; set; }

}
